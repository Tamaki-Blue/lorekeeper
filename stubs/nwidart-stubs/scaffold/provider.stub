<?php

namespace $NAMESPACE$;

use Esemve\Hook\Facades\Hook;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\ServiceProvider;
use Illuminate\Database\Eloquent\Factory;

class $CLASS$ extends ServiceProvider
{
    /**
     * @var string $moduleName
     */
    protected $moduleName = '$MODULE$';

    /**
     * @var string $moduleNameLower
     */
    protected $moduleNameLower = '$LOWER_NAME$';

    /**
     * Boot the application events.
     *
     * @return void
     */
    public function boot()
    {
        $this->registerTranslations();
        $this->registerConfig();
        $this->registerViews();
        $this->loadMigrationsFrom(module_path($this->moduleName, '$MIGRATIONS_PATH$'));
        $this->handleHooks();
        $this->registerCommands();
    }

    /**
     * Register the service provider.
     *
     * @return void
     */
    public function register()
    {
        $this->app->register(RouteServiceProvider::class);
    }

    /**
     * Register config.
     *
     * @return void
     */
    protected function registerConfig()
    {
        $this->publishes([
            module_path($this->moduleName, '$PATH_CONFIG$/config.php') => config_path($this->moduleNameLower . '.php'),
        ], 'config');
        $this->mergeConfigFrom(
            module_path($this->moduleName, '$PATH_CONFIG$/config.php'), $this->moduleNameLower
        );
    }

    /**
     * Register views.
     *
     * @return void
     */
    public function registerViews()
    {
        $viewPath = resource_path('views/modules/' . $this->moduleNameLower);

        $sourcePath = module_path($this->moduleName, '$PATH_VIEWS$');

        $this->publishes([
            $sourcePath => $viewPath
        ], ['views', $this->moduleNameLower . '-module-views']);

        $this->loadViewsFrom(array_merge($this->getPublishableViewPaths(), [$sourcePath]), $this->moduleNameLower);
    }

    /**
     * Register translations.
     *
     * @return void
     */
    public function registerTranslations()
    {
        $langPath = resource_path('lang/modules/' . $this->moduleNameLower);

        if (is_dir($langPath)) {
            $this->loadTranslationsFrom($langPath, $this->moduleNameLower);
            $this->loadJsonTranslationsFrom($langPath, $this->moduleNameLower);
        } else {
            $this->loadTranslationsFrom(module_path($this->moduleName, '$PATH_LANG$'), $this->moduleNameLower);
            $this->loadJsonTranslationsFrom(module_path($this->moduleName, '$PATH_LANG$'), $this->moduleNameLower);
        }
    }

    /**
     * Get the services provided by the provider.
     *
     * @return array
     */
    public function provides()
    {
        return [];
    }

    private function getPublishableViewPaths(): array
    {
        $paths = [];
        foreach (\Config::get('view.paths') as $path) {
            if (is_dir($path . '/modules/' . $this->moduleNameLower)) {
                $paths[] = $path . '/modules/' . $this->moduleNameLower;
            }
        }
        return $paths;
    }

    /**
     * Make various changes via hooks.
     */
    private function handleHooks() {
        if(DB::table('site_extensions')->where('key', $this->moduleNameLower)->exists()) {
            // Multiple listeners can impact the same hook, but only so long as
            // they have different priorities set. Since broadly extensions should
            // strive to be mutually compatible where feasible regardless, the index
            // of the extension in the on-site table is used here so as to provide
            // a unique number.
            $priority = DB::table('site_extensions')->get()->search(function ($extension) {
                return $extension->key == $this->moduleNameLower;
            });
        } else {
            // Failing that, attempt to just get an unused index.
            // This will cause problems if installing multiple extensions at once
            // that listen to the same hook(s), but this will self-resolve or can
            // be manually resolved by running the command to update the tracker.
            $priority = DB::table('site_extensions')->get()->count() + 1;
        }

        //
    }

    /**
     * Register any artisan commands.
     */
    private function registerCommands() {
        $this->commands([
            //
        ]);
    }
}
